/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as ServerCounterRouteImport } from './routes/serverCounter'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as PostsRouteImport } from './routes/posts'
import { Route as PokemonRouteImport } from './routes/pokemon'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users.index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as UsersUserIdRouteImport } from './routes/users.$userId'
import { Route as PostsPostIdRouteImport } from './routes/posts.$postId'
import { Route as PokemonIdRouteImport } from './routes/pokemon_.$id'
import { Route as hiddenGroupingOnlyFolderPathlessLayoutRouteImport } from './routes/(hidden-grouping-only-folder)/_pathlessLayout'
import { Route as PostsPostIdDeepRouteImport } from './routes/posts_.$postId.deep'
import { Route as hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteImport } from './routes/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout'
import { Route as hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRouteImport } from './routes/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-b'
import { Route as hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARouteImport } from './routes/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-a'
import { ServerRoute as CustomScriptDotjsServerRouteImport } from './routes/customScript[.]js'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiUsersUserIdServerRouteImport } from './routes/api/users.$userId'

const hiddenGroupingOnlyFolderRouteImport = createFileRoute(
  '/(hidden-grouping-only-folder)',
)()
const rootServerRouteImport = createServerRootRoute()

const hiddenGroupingOnlyFolderRoute =
  hiddenGroupingOnlyFolderRouteImport.update({
    id: '/(hidden-grouping-only-folder)',
    getParentRoute: () => rootRouteImport,
  } as any)
const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const ServerCounterRoute = ServerCounterRouteImport.update({
  id: '/serverCounter',
  path: '/serverCounter',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const PokemonRoute = PokemonRouteImport.update({
  id: '/pokemon',
  path: '/pokemon',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRoute,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRoute,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)
const PokemonIdRoute = PokemonIdRouteImport.update({
  id: '/pokemon_/$id',
  path: '/pokemon/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const hiddenGroupingOnlyFolderPathlessLayoutRoute =
  hiddenGroupingOnlyFolderPathlessLayoutRouteImport.update({
    id: '/_pathlessLayout',
    getParentRoute: () => hiddenGroupingOnlyFolderRoute,
  } as any)
const PostsPostIdDeepRoute = PostsPostIdDeepRouteImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRouteImport,
} as any)
const hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRoute =
  hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => hiddenGroupingOnlyFolderPathlessLayoutRoute,
  } as any)
const hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRoute =
  hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () =>
      hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRoute,
  } as any)
const hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARoute =
  hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () =>
      hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRoute,
  } as any)
const CustomScriptDotjsServerRoute = CustomScriptDotjsServerRouteImport.update({
  id: '/customScript.js',
  path: '/customScript.js',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersUserIdServerRoute = ApiUsersUserIdServerRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof hiddenGroupingOnlyFolderPathlessLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/pokemon': typeof PokemonRoute
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/search': typeof SearchRoute
  '/serverCounter': typeof ServerCounterRoute
  '/users': typeof UsersRouteWithChildren
  '/pokemon/$id': typeof PokemonIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/route-a': typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRoute
}
export interface FileRoutesByTo {
  '/': typeof hiddenGroupingOnlyFolderPathlessLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/pokemon': typeof PokemonRoute
  '/redirect': typeof RedirectRoute
  '/search': typeof SearchRoute
  '/serverCounter': typeof ServerCounterRoute
  '/pokemon/$id': typeof PokemonIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/route-a': typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/pokemon': typeof PokemonRoute
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/search': typeof SearchRoute
  '/serverCounter': typeof ServerCounterRoute
  '/users': typeof UsersRouteWithChildren
  '/(hidden-grouping-only-folder)': typeof hiddenGroupingOnlyFolderRouteWithChildren
  '/(hidden-grouping-only-folder)/_pathlessLayout': typeof hiddenGroupingOnlyFolderPathlessLayoutRouteWithChildren
  '/pokemon_/$id': typeof PokemonIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout': typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteWithChildren
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
  '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-a': typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARoute
  '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-b': typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/pokemon'
    | '/posts'
    | '/redirect'
    | '/search'
    | '/serverCounter'
    | '/users'
    | '/pokemon/$id'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/deep'
    | '/route-a'
    | '/route-b'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/pokemon'
    | '/redirect'
    | '/search'
    | '/serverCounter'
    | '/pokemon/$id'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts'
    | '/users'
    | '/posts/$postId/deep'
    | '/route-a'
    | '/route-b'
  id:
    | '__root__'
    | '/'
    | '/deferred'
    | '/pokemon'
    | '/posts'
    | '/redirect'
    | '/search'
    | '/serverCounter'
    | '/users'
    | '/(hidden-grouping-only-folder)'
    | '/(hidden-grouping-only-folder)/_pathlessLayout'
    | '/pokemon_/$id'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout'
    | '/posts_/$postId/deep'
    | '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-a'
    | '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-b'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DeferredRoute: typeof DeferredRoute
  PokemonRoute: typeof PokemonRoute
  PostsRoute: typeof PostsRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  SearchRoute: typeof SearchRoute
  ServerCounterRoute: typeof ServerCounterRoute
  UsersRoute: typeof UsersRouteWithChildren
  hiddenGroupingOnlyFolderRoute: typeof hiddenGroupingOnlyFolderRouteWithChildren
  PokemonIdRoute: typeof PokemonIdRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}
export interface FileServerRoutesByFullPath {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesByTo {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/customScript.js' | '/api/users' | '/api/users/$userId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/customScript.js' | '/api/users' | '/api/users/$userId'
  id: '__root__' | '/customScript.js' | '/api/users' | '/api/users/$userId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  CustomScriptDotjsServerRoute: typeof CustomScriptDotjsServerRoute
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(hidden-grouping-only-folder)': {
      id: '/(hidden-grouping-only-folder)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof hiddenGroupingOnlyFolderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/serverCounter': {
      id: '/serverCounter'
      path: '/serverCounter'
      fullPath: '/serverCounter'
      preLoaderRoute: typeof ServerCounterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pokemon': {
      id: '/pokemon'
      path: '/pokemon'
      fullPath: '/pokemon'
      preLoaderRoute: typeof PokemonRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof UsersRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof PostsRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof UsersRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof PostsRoute
    }
    '/pokemon_/$id': {
      id: '/pokemon_/$id'
      path: '/pokemon/$id'
      fullPath: '/pokemon/$id'
      preLoaderRoute: typeof PokemonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(hidden-grouping-only-folder)/_pathlessLayout': {
      id: '/(hidden-grouping-only-folder)/_pathlessLayout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutRouteImport
      parentRoute: typeof hiddenGroupingOnlyFolderRoute
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout': {
      id: '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutRoute
    }
    '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-b': {
      id: '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRoute
    }
    '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-a': {
      id: '/(hidden-grouping-only-folder)/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/customScript.js': {
      id: '/customScript.js'
      path: '/customScript.js'
      fullPath: '/customScript.js'
      preLoaderRoute: typeof CustomScriptDotjsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
  }
}

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface UsersRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

interface hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteChildren {
  hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARoute: typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARoute
  hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRoute
}

const hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteChildren: hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteChildren =
  {
    hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARoute:
      hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteARoute,
    hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRoute:
      hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteBRoute,
  }

const hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteWithChildren =
  hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRoute._addFileChildren(
    hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteChildren,
  )

interface hiddenGroupingOnlyFolderPathlessLayoutRouteChildren {
  hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteWithChildren
}

const hiddenGroupingOnlyFolderPathlessLayoutRouteChildren: hiddenGroupingOnlyFolderPathlessLayoutRouteChildren =
  {
    hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRoute:
      hiddenGroupingOnlyFolderPathlessLayoutNestedLayoutRouteWithChildren,
  }

const hiddenGroupingOnlyFolderPathlessLayoutRouteWithChildren =
  hiddenGroupingOnlyFolderPathlessLayoutRoute._addFileChildren(
    hiddenGroupingOnlyFolderPathlessLayoutRouteChildren,
  )

interface hiddenGroupingOnlyFolderRouteChildren {
  hiddenGroupingOnlyFolderPathlessLayoutRoute: typeof hiddenGroupingOnlyFolderPathlessLayoutRouteWithChildren
}

const hiddenGroupingOnlyFolderRouteChildren: hiddenGroupingOnlyFolderRouteChildren =
  {
    hiddenGroupingOnlyFolderPathlessLayoutRoute:
      hiddenGroupingOnlyFolderPathlessLayoutRouteWithChildren,
  }

const hiddenGroupingOnlyFolderRouteWithChildren =
  hiddenGroupingOnlyFolderRoute._addFileChildren(
    hiddenGroupingOnlyFolderRouteChildren,
  )

interface ApiUsersServerRouteChildren {
  ApiUsersUserIdServerRoute: typeof ApiUsersUserIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersUserIdServerRoute: ApiUsersUserIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DeferredRoute: DeferredRoute,
  PokemonRoute: PokemonRoute,
  PostsRoute: PostsRouteWithChildren,
  RedirectRoute: RedirectRoute,
  SearchRoute: SearchRoute,
  ServerCounterRoute: ServerCounterRoute,
  UsersRoute: UsersRouteWithChildren,
  hiddenGroupingOnlyFolderRoute: hiddenGroupingOnlyFolderRouteWithChildren,
  PokemonIdRoute: PokemonIdRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  CustomScriptDotjsServerRoute: CustomScriptDotjsServerRoute,
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
